import logging
from typing import Dict
import stripe
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import io
import speech_recognition as sr
from pydub import AudioSegment
import requests


from dotenv import load_dotenv
import os


load_dotenv()


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Stripe
stripe.api_key = os.getenv("STRIPE_API_KEY")

# Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Subscription plans
PLANS = {
    "basic": {
        "name": "Basic Plan",
        "description": "1000 API calls/month",
        "price": 500,
        "api_key": "sk_test_basic_1234567890",
    },
    "standard": {
        "name": "Standard Plan",
        "description": "5000 API calls/month",
        "price": 2000,
        "api_key": "sk_test_standard_1234567890",
    },
    "premium": {
        "name": "Premium Plan",
        "description": "Unlimited API calls",
        "price": 5000,
        "api_key": "sk_test_premium_1234567890",
    },
}


user_subscriptions: Dict[int, dict] = {}


class SubscriptionState(StatesGroup):
    choosing_plan = State()
    processing_payment = State()



bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def get_main_menu_keyboard():

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu"),
    )
    builder.row(
        InlineKeyboardButton(text="–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="my_subscription"),
    )
    builder.row(
        InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="detailed_info"),
    )
    builder.row(
        InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="subscribe"),
    )
    return builder.as_markup()


def get_plans_keyboard():

    builder = InlineKeyboardBuilder()
    for plan_id, plan in PLANS.items():
        builder.add(InlineKeyboardButton(
            text=f"{plan['name']} - ${plan['price'] / 100:.2f}",
            callback_data=f"plan_{plan_id}"
        ))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    builder.adjust(1)
    return builder.as_markup()


def get_plan_details_keyboard(plan_id: str):

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å",
        callback_data=f"purchase_{plan_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–ª–∞–Ω–∞–º",
        callback_data="view_plans"
    ))
    builder.adjust(1)
    return builder.as_markup()


async def create_stripe_payment_link(plan_id: str, user_id: int) -> str:
    plan = PLANS[plan_id]
    try:
        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'product_data': {
                        'name': plan['name'],
                        'description': plan['description'],
                    },
                    'unit_amount': plan['price'],
                },
                'quantity': 1,
            }],
            mode='payment',
            success_url=f'https://t.me/stratton_openAI_bot?start=success_{plan_id}_{user_id}',
            cancel_url=f'https://t.me/stratton_openAI_bot?start=cancel',
            metadata={
                'plan_id': plan_id,
                'telegram_user_id': user_id
            }
        )
        return session.url
    except Exception as e:
        logger.error(f"Error creating Stripe session: {e}")
        return None


async def handle_voice_message(message: types.Message):
    user_id = message.from_user.id
    subscription = user_subscriptions.get(user_id)
    if not subscription or subscription["status"] != "active":
        await message.answer(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.",
            reply_markup=get_main_menu_keyboard(),
        )
        return
    voice = await bot.download(message.voice.file_id)
    audio_data = io.BytesIO(voice.getvalue())
    try:
        audio = AudioSegment.from_ogg(audio_data)
        wav_data = io.BytesIO()
        audio.export(wav_data, format="wav")
        wav_data.seek(0)
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_data) as source:
            audio_text = recognizer.listen(source)
            text = recognizer.recognize_google(audio_text, language="ru-RU")
        await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∞—Å –ø–æ–Ω—è–ª?")
        gemini_response = ask_gemini(text)
        await message.answer(f"–û—Ç–≤–µ—Ç: {gemini_response}")
    except sr.UnknownValueError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
    except Exception as e:
        logger.error(f"Error processing voice message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


def ask_gemini(prompt: str) -> str:

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [{"parts": [{"text": prompt}]}],
    }
    response = requests.post(url, json=data, headers=headers)
    if response.status_code == 200:
        return response.json().get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text",
                                                                                                       "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")
    else:
        logger.error(f"Gemini API error: {response.status_code}, {response.text}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò."



@dp.message(Command("start"))
async def cmd_start(message: types.Message):

    if len(message.text.split()) > 1:
        args = message.text.split()[1]
        if args.startswith('success_'):
            _, plan_id, user_id = args.split('_')
            user_id = int(user_id)
            if user_id == message.from_user.id:
                plan = PLANS[plan_id]
                user_subscriptions[user_id] = {
                    "plan": plan_id,
                    "api_key": plan['api_key'],
                    "status": "active",
                }
                await message.answer(
                    f"üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n"
                    f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ <b>{plan['name']}</b>.\n"
                    f"–í–∞—à AI API –∫–ª—é—á:\n<code>{plan['api_key']}</code>",
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="HTML",
                )
                return
        elif args == 'cancel':
            await message.answer(
                "–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard(),
            )
            return


    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stratton AI!</b>\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. ü§ñ‚ú®\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML",
    )


@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stratton AI!</b>\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. ü§ñ‚ú®\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


@dp.callback_query(F.data == "my_subscription")
async def my_subscription(callback: types.CallbackQuery):

    user_id = callback.from_user.id
    subscription = user_subscriptions.get(user_id)
    if subscription:
        plan_id = subscription["plan"]
        plan = PLANS[plan_id]
        text = (
            f"üë§ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:</b>\n"
            f"üìã –ü–ª–∞–Ω: <b>{plan['name']}</b>\n"
            f"üîë API Key: <code>{subscription['api_key']}</code>\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: <b>{subscription['status'].capitalize()}</b>"
        )
    else:
        text = (
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º."
        )
    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


@dp.callback_query(F.data == "detailed_info")
async def detailed_info(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìö <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n"
        "üè™ –ö–æ–º–ø–∞–Ω–∏—è <a href='https://stratton.kz/'>Stratton.kz</a>\n"
        "–ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ä–æ–±–æ—Ç–∏–∑–∞—Ü–∏–∏, –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.\n"
        "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ <a href='https://stratton.taplink.ws/p/o-kompanii/'>—Ç—É—Ç</a>.\n\n"
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n"
        "–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –ø–∏—à–∏—Ç–µ ‚úçÔ∏è\n"
        "@bzg00\n\n"
        "ü§ñ <b>AI —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫</b>\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏:</b>\n"
        "1Ô∏è‚É£ <b>GPT-4 Turbo</b>\n"
        "- –°–∞–º—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "- –î–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞–Ω–∞—Ö: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏ –ü—Ä–µ–º–∏—É–º.\n"
        "2Ô∏è‚É£ <b>Claude 3</b>\n"
        "- –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö.\n"
        "- –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "- –î–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞–Ω–∞—Ö: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏ –ü—Ä–µ–º–∏—É–º.\n"
        "3Ô∏è‚É£ <b>Stable Diffusion</b>\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π.\n"
        "- –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
        "- –î–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞–Ω–µ: –ü—Ä–µ–º–∏—É–º.",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True,
    )
    await callback.answer()


@dp.callback_query(F.data == "subscribe")
async def subscribe(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>",
        reply_markup=get_plans_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("plan_"))
async def plan_details(callback: types.CallbackQuery):
    plan_id = callback.data.split("_")[1]
    plan = PLANS[plan_id]
    await callback.message.edit_text(
        f"üí° <b>{plan['name']}</b>\n"
        f"{plan['description']}\n"
        f"üíµ –¶–µ–Ω–∞: <b>${plan['price'] / 100:.2f}</b> –≤ –º–µ—Å—è—Ü\n"
        "–ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=get_plan_details_keyboard(plan_id),
        parse_mode="HTML",
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("purchase_"))
async def start_payment(callback: types.CallbackQuery, state: FSMContext):
    plan_id = callback.data.split("_")[1]
    plan = PLANS[plan_id]
    user_id = callback.from_user.id
    payment_url = await create_stripe_payment_link(plan_id, user_id)
    if not payment_url:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    await callback.message.edit_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ {plan['name']}</b>\n"
        f"–°—É–º–º–∞: <b>${plan['price'] / 100:.2f}</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Stripe", url=payment_url)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"plan_{plan_id}")],
        ]),
        parse_mode="HTML",
    )
    await callback.answer()


@dp.callback_query(F.data == "view_plans")
async def view_plans_callback(callback: types.CallbackQuery):

    await callback.message.edit_text(
        "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>",
        reply_markup=get_plans_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


@dp.message(F.voice)
async def handle_voice_message(message: types.Message):
    user_id = message.from_user.id
    subscription = user_subscriptions.get(user_id)

    if not subscription or subscription["status"] != "active":
        await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    voice = await bot.download(message.voice.file_id)
    audio_data = io.BytesIO(voice.getvalue())

    try:
        sound = AudioSegment.from_file(audio_data, format="ogg")
        wav_data = io.BytesIO()
        sound.export(wav_data, format="wav")

        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_data) as source:
            audio = recognizer.record(source)
        text = recognizer.recognize_google(audio, language="ru-RU")

        gemini_response = ask_gemini(text)
        await message.answer(f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò: {gemini_response}")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
